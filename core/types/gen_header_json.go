// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"go-wtc-aux/common"
	"go-wtc-aux/common/hexutil"
	"math/big"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash     common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash      common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Coinbase       common.Address `json:"miner"            gencodec:"required"`
		Root           common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash         common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash    common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom          Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty     *hexutil.Big   `json:"difficulty"       gencodec:"required"`
		Number         *hexutil.Big   `json:"number"           gencodec:"required"`
		GasLimit       hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed        hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time           hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		Extra          hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		MixDigest      common.Hash    `json:"mixHash"`
		Nonce          BlockNonce     `json:"nonce"`
		BaseFee        *hexutil.Big   `json:"baseFeePerGas"`
		AuxParentHash  common.Hash    `json:"auxParentHash"       gencodec:"required"`
		AuxUncleHash   common.Hash    `json:"auxSha3Uncles"       gencodec:"required"`
		AuxCoinbase    common.Address `json:"auxMiner"            gencodec:"required"`
		AuxRoot        common.Hash    `json:"auxStateRoot"        gencodec:"required"`
		AuxTxHash      common.Hash    `json:"auxTransactionsRoot" gencodec:"required"`
		AuxReceiptHash common.Hash    `json:"auxReceiptsRoot"     gencodec:"required"`
		AuxBloom       Bloom          `json:"auxLogsBloom"        gencodec:"required"`
		AuxCoinAge     *hexutil.Big   `json:"auxCoinage"       gencodec:"required"`
		AuxDifficulty  *hexutil.Big   `json:"auxDifficulty"       gencodec:"required"`
		AuxNumber      *hexutil.Big   `json:"auxNumber"           gencodec:"required"`
		AuxGasLimit    *hexutil.Big   `json:"auxGasLimit"         gencodec:"required"`
		AuxGasUsed     *hexutil.Big   `json:"auxGasUsed"          gencodec:"required"`
		AuxTime        *hexutil.Big   `json:"auxTimestamp"        gencodec:"required"`
		AuxExtra       hexutil.Bytes  `json:"auxExtraData"        gencodec:"required"`
		AuxMixDigest   common.Hash    `json:"auxMixHash"          gencodec:"required"`
		AuxNonce       BlockNonce     `json:"auxNonce"            gencodec:"required"`
		AuxTxNumber    hexutil.Uint64 `json:"auxTxnumber"         gencodec:"required"`
		Hash           common.Hash    `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.UncleHash = h.UncleHash
	enc.Coinbase = h.Coinbase
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Difficulty = (*hexutil.Big)(h.Difficulty)
	enc.Number = (*hexutil.Big)(h.Number)
	enc.GasLimit = hexutil.Uint64(h.GasLimit)
	enc.GasUsed = hexutil.Uint64(h.GasUsed)
	enc.Time = hexutil.Uint64(h.Time)
	enc.Extra = h.Extra
	enc.MixDigest = h.MixDigest
	enc.Nonce = h.Nonce
	enc.BaseFee = (*hexutil.Big)(h.BaseFee)
	enc.AuxParentHash = h.AuxParentHash
	enc.AuxUncleHash = h.AuxUncleHash
	enc.AuxCoinbase = h.AuxCoinbase
	enc.AuxRoot = h.AuxRoot
	enc.AuxTxHash = h.AuxTxHash
	enc.AuxReceiptHash = h.AuxReceiptHash
	enc.AuxBloom = h.AuxBloom
	enc.AuxCoinAge = (*hexutil.Big)(h.AuxCoinAge)
	enc.AuxDifficulty = (*hexutil.Big)(h.AuxDifficulty)
	enc.AuxNumber = (*hexutil.Big)(h.AuxNumber)
	enc.AuxGasLimit = (*hexutil.Big)(h.AuxGasLimit)
	enc.AuxGasUsed = (*hexutil.Big)(h.AuxGasUsed)
	enc.AuxTime = (*hexutil.Big)(h.AuxTime)
	enc.AuxExtra = h.AuxExtra
	enc.AuxMixDigest = h.AuxMixDigest
	enc.AuxNonce = h.AuxNonce
	enc.AuxTxNumber = hexutil.Uint64(h.AuxTxNumber)
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash     *common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash      *common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Coinbase       *common.Address `json:"miner"            gencodec:"required"`
		Root           *common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash         *common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash    *common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom          *Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty     *hexutil.Big    `json:"difficulty"       gencodec:"required"`
		Number         *hexutil.Big    `json:"number"           gencodec:"required"`
		GasLimit       *hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed        *hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time           *hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		Extra          *hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		MixDigest      *common.Hash    `json:"mixHash"`
		Nonce          *BlockNonce     `json:"nonce"`
		BaseFee        *hexutil.Big    `json:"baseFeePerGas"`
		AuxParentHash  *common.Hash    `json:"auxParentHash"       gencodec:"required"`
		AuxUncleHash   *common.Hash    `json:"auxSha3Uncles"       gencodec:"required"`
		AuxCoinbase    *common.Address `json:"auxMiner"            gencodec:"required"`
		AuxRoot        *common.Hash    `json:"auxStateRoot"        gencodec:"required"`
		AuxTxHash      *common.Hash    `json:"auxTransactionsRoot" gencodec:"required"`
		AuxReceiptHash *common.Hash    `json:"auxReceiptsRoot"     gencodec:"required"`
		AuxBloom       *Bloom          `json:"auxLogsBloom"        gencodec:"required"`
		AuxCoinAge     *hexutil.Big    `json:"auxCoinage"       gencodec:"required"`
		AuxDifficulty  *hexutil.Big    `json:"auxDifficulty"       gencodec:"required"`
		AuxNumber      *hexutil.Big    `json:"auxNumber"           gencodec:"required"`
		AuxGasLimit    *hexutil.Big    `json:"auxGasLimit"         gencodec:"required"`
		AuxGasUsed     *hexutil.Big    `json:"auxGasUsed"          gencodec:"required"`
		AuxTime        *hexutil.Big    `json:"auxTimestamp"        gencodec:"required"`
		AuxExtra       *hexutil.Bytes  `json:"auxExtraData"        gencodec:"required"`
		AuxMixDigest   *common.Hash    `json:"auxMixHash"          gencodec:"required"`
		AuxNonce       *BlockNonce     `json:"auxNonce"            gencodec:"required"`
		AuxTxNumber    *hexutil.Uint64 `json:"auxTxnumber"         gencodec:"required"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for Header")
	}
	h.UncleHash = *dec.UncleHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Header")
	}
	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = uint64(*dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	if dec.MixDigest != nil {
		h.MixDigest = *dec.MixDigest
	}
	if dec.Nonce != nil {
		h.Nonce = *dec.Nonce
	}
	if dec.BaseFee != nil {
		h.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.AuxParentHash == nil {
		return errors.New("missing required field 'auxParentHash' for Header")
	}
	h.AuxParentHash = *dec.AuxParentHash
	if dec.AuxUncleHash == nil {
		return errors.New("missing required field 'auxSha3Uncles' for Header")
	}
	h.AuxUncleHash = *dec.AuxUncleHash
	if dec.AuxCoinbase == nil {
		return errors.New("missing required field 'auxMiner' for Header")
	}
	h.AuxCoinbase = *dec.AuxCoinbase
	if dec.AuxRoot == nil {
		return errors.New("missing required field 'auxStateRoot' for Header")
	}
	h.AuxRoot = *dec.AuxRoot
	if dec.AuxTxHash == nil {
		return errors.New("missing required field 'auxTransactionsRoot' for Header")
	}
	h.AuxTxHash = *dec.AuxTxHash
	if dec.AuxReceiptHash == nil {
		return errors.New("missing required field 'auxReceiptsRoot' for Header")
	}
	h.AuxReceiptHash = *dec.AuxReceiptHash
	if dec.AuxBloom == nil {
		return errors.New("missing required field 'auxLogsBloom' for Header")
	}
	h.AuxBloom = *dec.AuxBloom
	if dec.AuxCoinAge == nil {
		return errors.New("missing required field 'auxCoinage' for Header")
	}
	h.AuxCoinAge = (*big.Int)(dec.AuxCoinAge)
	if dec.AuxDifficulty == nil {
		return errors.New("missing required field 'auxDifficulty' for Header")
	}
	h.AuxDifficulty = (*big.Int)(dec.AuxDifficulty)
	if dec.AuxNumber == nil {
		return errors.New("missing required field 'auxNumber' for Header")
	}
	h.AuxNumber = (*big.Int)(dec.AuxNumber)
	if dec.AuxGasLimit == nil {
		return errors.New("missing required field 'auxGasLimit' for Header")
	}
	h.AuxGasLimit = (*big.Int)(dec.AuxGasLimit)
	if dec.AuxGasUsed == nil {
		return errors.New("missing required field 'auxGasUsed' for Header")
	}
	h.AuxGasUsed = (*big.Int)(dec.AuxGasUsed)
	if dec.AuxTime == nil {
		return errors.New("missing required field 'auxTimestamp' for Header")
	}
	h.AuxTime = (*big.Int)(dec.AuxTime)
	if dec.AuxExtra == nil {
		return errors.New("missing required field 'auxExtraData' for Header")
	}
	h.AuxExtra = *dec.AuxExtra
	if dec.AuxMixDigest == nil {
		return errors.New("missing required field 'auxMixHash' for Header")
	}
	h.AuxMixDigest = *dec.AuxMixDigest
	if dec.AuxNonce == nil {
		return errors.New("missing required field 'auxNonce' for Header")
	}
	h.AuxNonce = *dec.AuxNonce
	if dec.AuxTxNumber == nil {
		return errors.New("missing required field 'auxTxnumber' for Header")
	}
	h.AuxTxNumber = uint64(*dec.AuxTxNumber)
	return nil
}
